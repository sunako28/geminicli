# .github/workflows/ga4-simple-analysis.yml
name: GA4 Simple Analysis

on:
  workflow_dispatch:
    inputs:
      date_range:
        description: '分析期間'
        required: false
        default: 'yesterday'
        type: choice
        options:
        - 'yesterday'
        - '7daysAgo'
        - '30daysAgo'
  schedule:
    # 毎日午前10時（JST）に実行
    - cron: '0 1 * * *'
  issue_comment:
    types: [created]

jobs:
  ga4-simple-analysis:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini analyze'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install MCP Dependencies
        run: |
          npm install @modelcontextprotocol/sdk
          
      - name: Gemini CLI Simple GA4 Analysis
        uses: google-gemini/gemini-cli-action@main
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "mcps": [
                {
                  "name": "google-analytics",
                  "command": "npx",
                  "args": ["@google-analytics/mcp-server"],
                  "env": {
                    "GOOGLE_ANALYTICS_PROPERTY_ID": "${{ secrets.GA_PROPERTY_ID }}",
                    "GOOGLE_ANALYTICS_CREDENTIALS": "${{ secrets.GA_CREDENTIALS }}"
                  }
                }
              ]
            }
          prompt: |
            ## 📊 GA4シンプル分析 & 改善提案
            
            GA4から基本的なデータを取得し、実用的な改善提案を作成してください。
            
            ### 📅 分析設定
            - **対象期間**: ${{ github.event.inputs.date_range || 'yesterday' }}
            - **実行時刻**: ${{ github.run_started_at }}
            
            ### 🔍 実行手順
            
            1. **基本データ取得**
               
               以下の2つの基本データのみ取得：
               
               ```
               # ページビューデータ
               google-analytics:getPageViews({ 
                 startDate: "${{ github.event.inputs.date_range || 'yesterday' }}", 
                 endDate: "${{ github.event.inputs.date_range || 'yesterday' }}",
                 dimensions: ["page"]
               })
               
               # イベントデータ
               google-analytics:getEvents({ 
                 startDate: "${{ github.event.inputs.date_range || 'yesterday' }}", 
                 endDate: "${{ github.event.inputs.date_range || 'yesterday' }}" 
               })
               ```
            
            2. **データ分析 & Issue作成**
               
               取得したデータを分析し、以下の形式でIssueを作成：
               
               ```bash
               gh issue create \
                 --title "📊 GA4分析 & 改善提案 - $(date '+%Y-%m-%d')" \
                 --body "# 📊 GA4分析 & 改善提案
               
               ## 📅 分析概要
               - **対象日**: ${{ github.event.inputs.date_range || 'yesterday' }}
               - **分析時刻**: ${{ github.run_started_at }}
               
               ## 📈 基本データ
               
               ### ページビュー分析
               \`\`\`
               総ページビュー: [合計数]
               
               人気ページ TOP3:
               1. [ページ名] - [PV数]
               2. [ページ名] - [PV数] 
               3. [ページ名] - [PV数]
               \`\`\`
               
               ### イベント分析
               \`\`\`
               総イベント数: [合計数]
               
               主要イベント TOP3:
               1. [イベント名] - [回数]
               2. [イベント名] - [回数]
               3. [イベント名] - [回数]
               \`\`\`
               
               ## 💡 改善提案
               
               ### 🎯 ページビュー改善
               
               **📊 現状分析:**
               - 最も人気: [1位のページ] ([PV数])
               - 改善対象: [下位のページ] ([PV数])
               
               **🔧 具体的改善案:**
               1. **低PVページの改善**
                  - タイトルの見直し（SEO対策）
                  - 内部リンクの追加
                  - ソーシャル共有の促進
               
               2. **人気ページの活用**
                  - 関連ページへの導線強化
                  - CTA（行動喚起）の最適化
                  - コンテンツの拡充
               
               ### 🎪 イベント改善
               
               **📊 現状分析:**
               - 最多イベント: [1位のイベント] ([回数])
               - 改善対象: [少ないイベント] ([回数])
               
               **🔧 具体的改善案:**
               1. **エンゲージメント向上**
                  - ボタンクリック率の改善
                  - スクロール深度の向上
                  - 滞在時間の延長
               
               2. **コンバージョン最適化**
                  - 重要イベントの導線改善
                  - ユーザビリティの向上
                  - A/Bテストの実施
               
               ## 📋 今週のアクションプラン
               
               ### 🚀 すぐできる改善（1-3日）
               - [ ] 低PVページのタイトル見直し
               - [ ] 人気ページに関連リンク追加
               - [ ] 重要ボタンの配置確認
               
               ### 📈 中期改善（1-2週間）
               - [ ] SEO対策の実施
               - [ ] コンテンツの追加・更新
               - [ ] ユーザビリティテスト
               
               ### 🎯 効果測定（継続）
               - [ ] 改善後のPV変化を監視
               - [ ] イベント発生率の追跡
               - [ ] 週次での改善効果確認
               
               ## 🤖 次回分析コマンド
               - \`@gemini analyze\` - 今日の分析
               - \`@gemini analyze 7days\` - 週次分析
               - \`@gemini analyze 30days\` - 月次分析
               
               ## 📊 データの見方
               
               ### PV数の目安
               - 😊 50+ : 人気ページ
               - 🙂 10-50 : 平均的
               - 😐 1-10 : 改善要
               - 😔 0 : 要対策
               
               ### イベント数の目安  
               - 🎉 100+ : 高エンゲージメント
               - 👍 20-100 : 良好
               - 🤔 5-20 : 改善余地あり
               - 😟 0-5 : 要改善
               
               ---
               
               **🔄 次回改善チェック**: [1週間後の日付]  
               **📈 改善目標**: PV +20%, イベント +15%"
               ```
            
            ### ⚡ 重要な実行指示
            
            1. **シンプルさ重視**
               - ページビューとイベント数のみに集中
               - 複雑な分析は避ける
               - 数値は分かりやすく表示
            
            2. **実用的な改善提案**
               - 具体的なアクション項目を提示
               - 優先度を明確にする
               - 実施可能な範囲で提案
            
            3. **データの解釈**
               - 数値だけでなく、その意味を説明
               - 業界平均との比較（可能であれば）
               - 改善の方向性を示す
            
            4. **継続性の担保**
               - 次回チェック日を設定
               - 改善目標の数値化
               - 進捗追跡の仕組み
            
            5. **エラー時の対応**
               - データ取得できない場合は代替案提示
               - 部分的なデータでも分析実行
               - 改善できない理由も説明
            
            今すぐGA4 MCPサーバーからデータを取得し、実用的な改善提案を含むIssueを作成してください！

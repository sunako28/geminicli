# .github/workflows/ga4-events-numbers.yml
name: GA4 Events Numbers Only

on:
  workflow_dispatch:
    inputs:
      date_range:
        description: '分析期間'
        required: false
        default: 'yesterday'
        type: choice
        options:
        - 'yesterday'
        - '7daysAgo'
        - '30daysAgo'
  schedule:
    # 毎日午前10時（JST）に実行
    - cron: '0 1 * * *'
  issue_comment:
    types: [created]

jobs:
  ga4-events-numbers:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini numbers'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install GA4 Dependencies
        run: |
          npm install @google-analytics/data@^4.0.0
          
      - name: Extract GA4 Numbers
        run: |
          echo "=== GA4 数値データ取得 ==="
          
          cat > extract-ga4-numbers.js << 'EOF'
          const { BetaAnalyticsDataClient } = require('@google-analytics/data');
          
          async function extractNumbers() {
            try {
              const credentials = JSON.parse(process.env.GOOGLE_ANALYTICS_CREDENTIALS);
              const client = new BetaAnalyticsDataClient({ credentials });
              const propertyId = process.env.GOOGLE_ANALYTICS_PROPERTY_ID;
              const dateRange = process.env.DATE_RANGE || 'yesterday';
              
              console.log('📊 GA4 Data Extraction Started');
              console.log('📅 Date Range:', dateRange);
              
              // 基本メトリクス
              const [basicMetrics] = await client.runReport({
                property: `properties/${propertyId}`,
                dateRanges: [{ startDate: dateRange, endDate: dateRange }],
                metrics: [
                  { name: 'activeUsers' },
                  { name: 'newUsers' },
                  { name: 'sessions' },
                  { name: 'screenPageViews' },
                  { name: 'bounceRate' },
                  { name: 'averageSessionDuration' }
                ]
              });
              
              // イベント別データ
              const [eventData] = await client.runReport({
                property: `properties/${propertyId}`,
                dateRanges: [{ startDate: dateRange, endDate: dateRange }],
                dimensions: [{ name: 'eventName' }],
                metrics: [{ name: 'eventCount' }],
                orderBys: [{ metric: { metricName: 'eventCount' }, desc: true }],
                limit: 20
              });
              
              // ページ別データ
              const [pageData] = await client.runReport({
                property: `properties/${propertyId}`,
                dateRanges: [{ startDate: dateRange, endDate: dateRange }],
                dimensions: [{ name: 'pagePath' }],
                metrics: [{ name: 'screenPageViews' }],
                orderBys: [{ metric: { metricName: 'screenPageViews' }, desc: true }],
                limit: 10
              });
              
              // デバイス別データ
              const [deviceData] = await client.runReport({
                property: `properties/${propertyId}`,
                dateRanges: [{ startDate: dateRange, endDate: dateRange }],
                dimensions: [{ name: 'deviceCategory' }],
                metrics: [
                  { name: 'activeUsers' },
                  { name: 'sessions' }
                ]
              });
              
              // 結果を JSON 形式で出力
              const results = {
                date: dateRange,
                timestamp: new Date().toISOString(),
                basic_metrics: {},
                events: {},
                pages: {},
                devices: {}
              };
              
              // 基本メトリクス
              if (basicMetrics.rows && basicMetrics.rows[0]) {
                const row = basicMetrics.rows[0];
                results.basic_metrics = {
                  active_users: parseInt(row.metricValues[0].value),
                  new_users: parseInt(row.metricValues[1].value),
                  sessions: parseInt(row.metricValues[2].value),
                  page_views: parseInt(row.metricValues[3].value),
                  bounce_rate: Math.round(parseFloat(row.metricValues[4].value) * 100) / 100,
                  avg_session_duration: Math.round(parseFloat(row.metricValues[5].value))
                };
              }
              
              // イベント別
              if (eventData.rows) {
                eventData.rows.forEach(row => {
                  const eventName = row.dimensionValues[0].value;
                  const eventCount = parseInt(row.metricValues[0].value);
                  results.events[eventName] = eventCount;
                });
              }
              
              // ページ別
              if (pageData.rows) {
                pageData.rows.forEach(row => {
                  const pagePath = row.dimensionValues[0].value;
                  const pageViews = parseInt(row.metricValues[0].value);
                  results.pages[pagePath] = pageViews;
                });
              }
              
              // デバイス別
              if (deviceData.rows) {
                deviceData.rows.forEach(row => {
                  const device = row.dimensionValues[0].value;
                  const users = parseInt(row.metricValues[0].value);
                  const sessions = parseInt(row.metricValues[1].value);
                  results.devices[device] = { users, sessions };
                });
              }
              
              // 結果を環境変数として出力（GitHub Actionsで使用）
              console.log('=== RESULTS START ===');
              console.log(JSON.stringify(results, null, 2));
              console.log('=== RESULTS END ===');
              
              // シンプルな数値のみ出力
              console.log('=== SIMPLE NUMBERS ===');
              console.log('アクティブユーザー:', results.basic_metrics.active_users);
              console.log('新規ユーザー:', results.basic_metrics.new_users);
              console.log('セッション数:', results.basic_metrics.sessions);
              console.log('ページビュー:', results.basic_metrics.page_views);
              console.log('直帰率:', results.basic_metrics.bounce_rate + '%');
              console.log('平均セッション時間:', results.basic_metrics.avg_session_duration + '秒');
              
              console.log('\n=== TOP EVENTS ===');
              Object.entries(results.events).slice(0, 5).forEach(([event, count]) => {
                console.log(`${event}: ${count}`);
              });
              
              // ファイルに保存
              require('fs').writeFileSync('ga4-numbers.json', JSON.stringify(results, null, 2));
              console.log('✅ Data saved to ga4-numbers.json');
              
            } catch (error) {
              console.error('❌ Error:', error.message);
              process.exit(1);
            }
          }
          
          extractNumbers();
          EOF
          
          node extract-ga4-numbers.js
        env:
          GOOGLE_ANALYTICS_PROPERTY_ID: ${{ secrets.GA_PROPERTY_ID }}
          GOOGLE_ANALYTICS_CREDENTIALS: ${{ secrets.GA_CREDENTIALS }}
          DATE_RANGE: ${{ github.event.inputs.date_range || 'yesterday' }}
          
      - name: Upload Numbers Data
        uses: actions/upload-artifact@v4
        with:
          name: ga4-numbers-data
          path: ga4-numbers.json
          
      - name: Create Numbers Report
        uses: google-gemini/gemini-cli-action@main
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            ## GA4数値レポート作成
            
            GA4から取得した数値データを基に、シンプルな数値レポートを作成してください。
            
            ### データ取得情報
            - **日付**: ${{ github.event.inputs.date_range || 'yesterday' }}
            - **実行時刻**: ${{ github.run_started_at }}
            
            ### レポート作成指示
            
            以下のコマンドで数値のみのシンプルなIssueを作成：
            
            ```bash
            gh issue create \
              --title "📊 GA4数値データ - $(date '+%Y-%m-%d')" \
              --body "# 📊 GA4数値データ
            
            ## 📅 データ概要
            - **対象日**: ${{ github.event.inputs.date_range || 'yesterday' }}
            - **取得時刻**: ${{ github.run_started_at }}
            - **データソース**: Google Analytics 4
            
            ## 📈 基本指標（数値のみ）
            
            \`\`\`
            アクティブユーザー: [実際の数値]
            新規ユーザー: [実際の数値]  
            セッション数: [実際の数値]
            ページビュー: [実際の数値]
            直帰率: [実際の数値]%
            平均セッション時間: [実際の数値]秒
            \`\`\`
            
            ## 🎯 主要イベント（TOP5）
            
            \`\`\`
            [イベント名1]: [数値]
            [イベント名2]: [数値]
            [イベント名3]: [数値]
            [イベント名4]: [数値]
            [イベント名5]: [数値]
            \`\`\`
            
            ## 📱 デバイス別ユーザー
            
            \`\`\`
            デスクトップ: [ユーザー数] ([セッション数])
            モバイル: [ユーザー数] ([セッション数])
            タブレット: [ユーザー数] ([セッション数])
            \`\`\`
            
            ## 📄 人気ページ（TOP5）
            
            \`\`\`
            [ページ1]: [PV数]
            [ページ2]: [PV数]
            [ページ3]: [PV数]
            [ページ4]: [PV数]
            [ページ5]: [PV数]
            \`\`\`
            
            ## 📊 JSON データ
            
            完全なデータが必要な場合は、以下のArtifactsからダウンロードできます：
            - Workflow Run: ${{ github.run_id }}
            - Artifact: ga4-numbers-data
            
            ## 🤖 コマンド
            - \`@gemini numbers\` - 数値データ再取得
            - \`@gemini numbers 7days\` - 7日間のデータ
            - \`@gemini numbers 30days\` - 30日間のデータ
            
            ---
            
            *データ取得: ${{ github.run_started_at }}*"
            ```
            
            ### 重要な指示
            1. 上記の [実際の数値] の部分は、実際にGA4から取得したデータで置き換えてください
            2. 数値のみをクリアに表示してください
            3. 余計な説明や解釈は不要です
            4. エラーが発生した場合も、その旨を数値と共に報告してください
            
            今すぐ実行してください。

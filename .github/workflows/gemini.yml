\# .github/workflows/reliable-gemini-issue.yml
name: Reliable Gemini Issue Creation

on:
  workflow_dispatch:
  issue_comment:
    types: [created]

jobs:
  create-issue-reliably:
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'issue_comment' && startsWith(github.event.comment.body, '@gemini issue'))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Verify GitHub CLI
        run: |
          echo "=== GitHub CLI Verification ==="
          gh auth status
          gh repo view ${{ github.repository }}
          echo "GitHub CLI is working correctly"
        env:
          GH_TOKEN: ${{ github.token }}
          
      - name: Gemini Issue Creation with Verification
        uses: google-gemini/gemini-cli-action@main
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            ## 📋 CRITICAL INSTRUCTION: Issue作成を確実に実行してください
            
            以下の手順を**順番通りに必ず実行**してください：
            
            ### Step 1: GitHub CLI動作確認
            まず、以下のコマンドでGitHub CLIが動作するか確認：
            ```bash
            gh auth status
            ```
            
            ### Step 2: Issue作成の実行
            以下のコマンドを**必ず実行**してください（コピー&ペーストして実行）：
            
            ```bash
            gh issue create \
              --title "📊 Gemini分析レポート - $(date '+%Y-%m-%d %H:%M')" \
              --body "# 📊 自動分析レポート

            ## 🤖 実行情報
            - **実行時刻**: ${{ github.run_started_at }}
            - **トリガー**: ${{ github.event_name }}
            - **ワークフロー**: Reliable Gemini Issue Creation
            - **Node.js**: 20.x

            ## ✅ 成功した処理
            - GitHub Actions実行: 成功
            - Gemini CLI起動: 成功
            - GitHub CLI認証: 成功
            - Issue作成: 成功

            ## 📈 分析結果（サンプル）
            | 指標 | 値 | ステータス |
            |------|----|----|
            | システム動作 | 正常 | ✅ |
            | API接続 | 成功 | ✅ |
            | データ取得 | 準備中 | 🔄 |

            ## 💡 改善提案
            1. **GA4連携の設定**
               - Google Analytics MCPサーバーの設定
               - 認証情報の確認
               - テストデータの取得

            2. **自動化の強化**
               - 定期実行スケジュールの設定
               - エラーハンドリングの改善
               - 通知機能の追加

            ## 🔄 次のステップ
            - [ ] GA4 MCP設定の完了
            - [ ] 実際のAnalyticsデータでのテスト
            - [ ] 定期実行の有効化

            ## 🤖 追加コマンド
            - \`@gemini analytics\` - GA4分析実行
            - \`@gemini issue 詳細分析\` - 詳細レポート作成
            - \`@gemini setup\` - 設定確認

            ---
            *このレポートはGemini CLIによって自動生成されました*"
            ```
            
            ### Step 3: 実行結果の確認
            コマンド実行後、以下を確認：
            ```bash
            echo "Issue creation completed"
            gh issue list --limit 1
            ```
            
            ### Step 4: エラーハンドリング
            もしStep 2でエラーが発生した場合、以下を実行：
            ```bash
            echo "Primary issue creation failed, trying alternative method"
            gh issue create --title "🚨 Issue Creation Backup" --body "Backup issue creation method used"
            ```
            
            ## 🚨 重要な注意
            - 上記のコマンドは必ず実行してください
            - コマンドの実行結果をログで確認してください
            - エラーが発生した場合は、エラーメッセージを記録してください
            
            ## 実行開始
            今すぐStep 1から順番に実行してください。

name: GA4 MCP Analysis
on:
  workflow_dispatch:
    inputs:
      date_range:
        description: '分析期間'
        required: false
        default: 'yesterday'
        type: choice
        options:
        - 'yesterday'
        - '7daysAgo'
        - '30daysAgo'
  schedule:
    - cron: '0 1 * * *'  # 毎日日本時間10時（UTC 1時）
  issue_comment:
    types: [created]

jobs:
  ga4-analysis:
    if: |
      github.event_name == 'workflow_dispatch' ||
      github.event_name == 'schedule' ||
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@gemini analyze'))
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      issues: write
      id-token: write
    
    steps:
      - name: Run GA4 MCP Analysis
        uses: google-gemini/gemini-cli-action@main
        env:
          GH_TOKEN: ${{ github.token }}
          GOOGLE_ANALYTICS_PROPERTY_ID: ${{ secrets.GA_PROPERTY_ID }}
          GOOGLE_ANALYTICS_CREDENTIALS: ${{ secrets.GA_CREDENTIALS }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          settings_json: |
            {
              "mcpServers": {
                "google-analytics": {
                  "command": "npx",
                  "args": ["-y", "@modelcontextprotocol/server-google-analytics"],
                  "env": {
                    "GOOGLE_ANALYTICS_PROPERTY_ID": "$GOOGLE_ANALYTICS_PROPERTY_ID",
                    "GOOGLE_ANALYTICS_CREDENTIALS": "$GOOGLE_ANALYTICS_CREDENTIALS"
                  }
                }
              },
              "coreTools": [
                "mcp__google-analytics__getPageViews",
                "mcp__google-analytics__getActiveUsers",
                "mcp__google-analytics__getEvents",
                "mcp__google-analytics__getUserBehavior",
                "mcp__google-analytics__runReport"
              ]
            }
          prompt: |
            あなたは GA4 データ分析アシスタントです。

            ## 📊 実行手順

            1. **GA4データを取得してください:**
               - 対象期間: ${{ github.event.inputs.date_range || 'yesterday' }}
               - ページビューデータ（上位10ページ）
               - イベントデータ（上位10イベント）
               - 基本的なユーザー指標

            2. **データを分析して以下を特定してください:**
               - 最も人気のページとPV数
               - 最も発生したイベントと回数
               - 改善が必要な低パフォーマンスエリア
               - 成功している高パフォーマンスエリア

            3. **必ずGitHub Issueを作成してください:**

            取得したデータを基に、以下のコマンドを**必ず実行**してください：

            gh issue create --title "📊 GA4日次分析レポート - $(date '+%Y-%m-%d')" --body "# 📊 GA4分析レポート

            ## 📅 分析概要
            - **対象期間**: ${{ github.event.inputs.date_range || 'yesterday' }}
            - **分析実行時刻**: $(date '+%Y-%m-%d %H:%M:%S JST')
            - **データソース**: Google Analytics 4 (MCP)

            ## 📈 基本指標

            ### 📊 主要数値
            - **アクティブユーザー**: [実際の数値で置換]
            - **ページビュー**: [実際の数値で置換]
            - **セッション数**: [実際の数値で置換]
            - **平均セッション時間**: [実際の数値で置換]秒

            ## 🏆 人気コンテンツ TOP5

            ### 📄 人気ページ
            [実際のデータで置換してください]

            ### 🎯 主要イベント
            [実際のデータで置換してください]

            ## 💡 改善提案

            [実際のデータ分析に基づいた改善提案を記載]

            ## 📋 今日のアクションプラン

            ### ✅ すぐできる改善（今日中）
            - [ ] 人気ページの関連記事リンク追加
            - [ ] 低PVページのタイトル確認
            - [ ] 重要ボタンの配置確認

            ### 📈 今週の改善項目
            - [ ] SEO対策の実施
            - [ ] ユーザビリティテスト
            - [ ] コンテンツ更新計画

            ## 🤖 次回分析コマンド
            - \`@gemini analyze\` - 今日の分析
            - \`@gemini analyze 7days\` - 週間分析  
            - \`@gemini analyze 30days\` - 月間分析

            ---
            **📊 データ取得**: MCP経由 GA4 API  
            **🔄 次回自動実行**: 明日 10:00 JST"

            ## ⚡ 重要な実行指示

            1. **必ずGA4 MCPツールを使用してリアルデータを取得してください**
            2. **取得したデータで [実際の数値で置換] の部分を実際の数値に置き換えてください**
            3. **データ取得後、必ず上記の gh issue create コマンドを実行してください**
            4. **コマンド実行が完了したら「Issue #[番号] を作成しました」と報告してください**

            今すぐ実行してください！

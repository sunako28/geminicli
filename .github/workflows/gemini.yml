# .github/workflows/issue-auto-response.yml
name: Issue Auto Response

on:
  issues:
    types: [opened, reopened, edited]
  issue_comment:
    types: [created]

jobs:
  auto-respond-to-issue:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Analyze and Respond to Issue
        uses: google-gemini/gemini-cli-action@main
        env:
          GH_TOKEN: ${{ github.token }}
        with:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          prompt: |
            GitHub Issueの内容を分析して、適切な対応を行ってください。
            
            ## Issue情報
            - **Issue番号**: #${{ github.event.issue.number }}
            - **タイトル**: "${{ github.event.issue.title }}"
            - **作成者**: @${{ github.event.issue.user.login }}
            - **作成日時**: ${{ github.event.issue.created_at }}
            - **イベント**: ${{ github.event.action }}
            
            ## Issue内容
            ```
            ${{ github.event.issue.body }}
            ```
            
            ## 対応方針
            以下の観点でIssueを分析し、適切な対応を実行してください：
            
            ### 1. Issue分類の判定
            - **🐛 Bug Report**: バグ報告
            - **✨ Feature Request**: 機能要望
            - **❓ Question**: 質問・サポート
            - **📚 Documentation**: ドキュメント関連
            - **🔧 Task**: 作業・タスク
            - **🚀 Enhancement**: 改善提案
            
            ### 2. 対応パターンの選択
            
            #### パターンA: バグ報告の場合
            - 再現手順の確認
            - 環境情報の収集
            - 原因の分析
            - 修正方法の提案
            - 優先度の設定
            
            #### パターンB: 機能要望の場合
            - 要望の詳細確認
            - 実装可能性の評価
            - 設計案の提案
            - 必要なリソースの見積もり
            - ロードマップへの位置づけ
            
            #### パターンC: 質問・サポートの場合
            - 質問内容の理解
            - 回答・解決策の提供
            - 関連ドキュメントの案内
            - 追加質問への対応準備
            
            #### パターンD: ドキュメント関連の場合
            - 不足している情報の特定
            - 改善案の提案
            - 更新すべきファイルの特定
            - 構造改善の提案
            
            #### パターンE: タスク・作業の場合
            - 作業内容の詳細化
            - 実装手順の提案
            - 必要なスキル・リソースの特定
            - チェックリストの作成
            
            ## 実行指示
            
            ### Step 1: ラベル付けの提案
            Issue内容に基づいて適切なラベルを提案し、以下のコマンドでラベルを追加：
            
            ```bash
            gh issue edit ${{ github.event.issue.number }} --add-label "[適切なラベル名]"
            ```
            
            ### Step 2: 詳細な対応コメントの投稿
            以下のフォーマットでコメントを投稿：
            
            ```bash
            gh issue comment ${{ github.event.issue.number }} --body "🤖 **自動分析結果**
            
            @${{ github.event.issue.user.login }} さん、Issueを作成いただきありがとうございます！
            
            ## 📋 Issue分析
            - **分類**: [判定した分類]
            - **優先度**: [高/中/低]
            - **複雑度**: [複雑/普通/単純]
            - **推定工数**: [X時間/X日]
            
            ## 🔍 内容理解
            [Issue内容の要約と理解した内容]
            
            ## 💡 対応方針・提案
            [具体的な対応方針や解決策の提案]
            
            ### 📝 次のステップ
            - [ ] [具体的なアクション1]
            - [ ] [具体的なアクション2]
            - [ ] [具体的なアクション3]
            
            ### 🔧 技術的詳細
            [技術的な実装方法や調査が必要な場合]
            
            ### 📚 参考資料
            [関連するドキュメントやリンク]
            
            ## ❓ 追加で必要な情報
            [もし不足している情報があれば]
            - [必要な情報1]
            - [必要な情報2]
            
            ## 🚀 自動対応可能な作業
            [Geminiが自動で実行できる作業があれば提案]
            
            ---
            
            ### 🤖 利用可能なコマンド
            - \`@gemini このIssueを詳しく分析して\`
            - \`@gemini 実装方法を提案して\`
            - \`@gemini 類似のIssueを検索して\`
            - \`@gemini テストケースを作成して\`
            - \`@gemini ドキュメントを更新して\`
            
            何かご質問があれば、お気軽にコメントでお声がけください！"
            ```
            
            ### Step 3: 自動対応可能な場合の追加アクション
            
            もしIssueの内容が以下に該当する場合、自動で対応を実行：
            
            #### 📚 ドキュメント要求の場合
            - README更新の提案
            - 新しいドキュメントファイルの作成
            - API仕様書の生成
            
            #### 🧪 テスト関連の場合
            - テストケースの提案
            - テストファイルのテンプレート作成
            
            #### 🔧 設定・構成の場合
            - 設定ファイルのテンプレート作成
            - GitHub Actionsワークフローの提案
            
            ## 特別な対応ルール
            
            ### 緊急度の判定
            以下のキーワードが含まれる場合は高優先度として扱う：
            - "urgent", "critical", "broken", "not working"
            - "production", "live", "customer", "security"
            - "緊急", "重要", "至急", "本番", "障害"
            
            ### 自動クローズ条件
            以下の場合は適切な説明とともに自動クローズを提案：
            - 重複Issue
            - 情報不足で対応不可能
            - プロジェクト範囲外
            
            ## 実行開始
            今すぐ上記の分析と対応を実行してください。GEMINI.mdの内容も参考にして、プロジェクトの方針に沿った対応を行ってください。
